npx create-react-app frontend

cd frontend

npm install axios

npm start

app.js code = 

// src/App.js
import React, { useState, useEffect } from 'react';
import axios from 'axios';

const App = () => {
  const [students, setStudents] = useState([]);
  const [formData, setFormData] = useState({
    rollno: '',
    name: '',
    branch: '',
    dob: ''
  });

  useEffect(() => {
    fetchStudents();
  }, []);

  const fetchStudents = async () => {
    try {
      const response = await axios.get('http://localhost:3000/students');
      setStudents(response.data);
    } catch (error) {
      console.error('Error fetching students:', error);
    }
  };

  const handleDelete = async (rollno) => {
    try {
      await axios.delete(`http://localhost:3000/students/${rollno}`);
      fetchStudents();
    } catch (error) {
      console.error('Error deleting student:', error);
    }
  };

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleAdd = async (e) => {
    e.preventDefault();
    try {
      await axios.post('http://localhost:3000/students', formData);
      fetchStudents();
      setFormData({ rollno: '', name: '', branch: '', dob: '' });
    } catch (error) {
      console.error('Error adding student:', error);
    }
  };

  const handleUpdate = async (rollno) => {
    try {
      await axios.put(`http://localhost:3000/students/${rollno}`, formData);
      fetchStudents();
      setFormData({ rollno: '', name: '', branch: '', dob: '' });
    } catch (error) {
      console.error('Error updating student:', error);
    }
  };

  return (
    <div>
      <h2>Student List</h2>
      <table>
        <thead>
          <tr>
            <th>Roll No</th>
            <th>Name</th>
            <th>Branch</th>
            <th>DOB</th>
            <th>Action</th>
          </tr>
        </thead>
        <tbody>
          {students.map((student) => (
            <tr key={student.rollno}>
              <td>{student.rollno}</td>
              <td>{student.name}</td>
              <td>{student.branch}</td>
              <td>{student.dob}</td>
              <td>
                <button onClick={() => handleDelete(student.rollno)}>Delete</button>
                <button onClick={() => setFormData({ ...student })}>Update</button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
      <h2>Add / Update Student</h2>
      <form onSubmit={formData.rollno ? () => handleUpdate(formData.rollno) : handleAdd}>
        <input type="text" name="rollno" value={formData.rollno} onChange={handleChange} placeholder="Roll No" required />
        <input type="text" name="name" value={formData.name} onChange={handleChange} placeholder="Name" required />
        <input type="text" name="branch" value={formData.branch} onChange={handleChange} placeholder="Branch" required />
        <input type="date" name="dob" value={formData.dob} onChange={handleChange} placeholder="DOB" required />
        <button type="submit">{formData.rollno ? 'Update Student' : 'Add Student'}</button>
      </form>
    </div>
  );
};

export default App;
